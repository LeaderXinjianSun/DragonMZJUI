using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ViewROI;
using HalconDotNet;
using System.IO;

namespace DragonMZJUI.Model
{
    public class Vision
    {
        public HWindow window1;
        public HDevEngine myEngine = new HDevEngine();
        public HDevProcedureCall cam1ProcedureCall1, cam1ProcedureCall2, cam1ProcedureCall3;
        public bool CCDStatus = false;
        //C:/Program Files/MVTec/HALCON-13.0/procedures/
        public Vision()
        {
            try
            {

                InitSaveImageFilePath();
                string path = System.Environment.CurrentDirectory + "\\Programs";
                //视觉引擎加载过程
                myEngine.SetProcedurePath(path);
                //视觉脚本程序加载
                HDevProgram myProgram = new HDevProgram(path + "\\Main.hdev");
                //将过程挂载到视觉脚本
                
                cam1ProcedureCall1 = new HDevProcedureCall(new HDevProcedure(myProgram, "TileImage"));
                cam1ProcedureCall2 = new HDevProcedureCall(new HDevProcedure(myProgram, "HS9Operate"));
                cam1ProcedureCall3 = new HDevProcedureCall(new HDevProcedure(myProgram, "TileImage3"));
                OpenCameraAsync();
            }
            catch (Exception ex)
            {
                GlobalVar.AddMessage(ex.Message);
            }
        }
        private void InitSaveImageFilePath()
        {
            try
            {
                if (!Directory.Exists(@"E:\images"))
                {
                    Directory.CreateDirectory(@"E:\images");
                }
                string[] imagefilenames = Directory.GetFiles(@"E:\images");
                if (imagefilenames.Length >= 200)
                {
                    for (int i = 0; i < imagefilenames.Length; i++)
                    {
                        File.Delete(imagefilenames[i]);
                    }
                    GlobalVar.AddMessage("清理照片");
                }
            }
            catch (Exception ex)
            {

                GlobalVar.AddMessage(ex.Message);
            }
        }
        public HImage Image1 = null;
        public HImage Image2 = null;
        public HImage Image_1 = null, Image_2 = null, Image_3 = null;
        public HImage TiledImage = null;
        HFramegrabber Framegrabber1, Framegrabber2, Framegrabber3;
        public async void OpenCameraAsync()
        {
            Task task = Task.Run(() =>
            {
                OpenCamera();
            });
            await task;
        }
        public void OpenCamera()
        {
            try
            {
                GlobalVar.AddMessage("相机打开中...");
                //Image Acquisition 01: Code generated by Image Acquisition 01
                Framegrabber1 = new HFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default",
                    -1, "default", -1, "false", "default", "CAM1", 0, -1);
                Framegrabber2 = new HFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default",
    -1, "default", -1, "false", "default", "CAM2", 0, -1);
                Framegrabber3 = new HFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default",
    -1, "default", -1, "false", "default", "CAM3", 0, -1);
                //Framegrabber = new HFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default",
                //    -1, "default", -1, "false", "default", "cam1", 0, -1);
                GlobalVar.AddMessage("相机打开成功！");
                CCDStatus = true;
            }
            catch(Exception ex)
            {
                CCDStatus = false;
                GlobalVar.AddMessage(ex.Message);
            }

        }
        public void CloseCamera()
        {
            try
            {
                GlobalVar.AddMessage("相机关闭中...");
                HOperatorSet.CloseAllFramegrabbers();
                GlobalVar.AddMessage("相机关闭！");
                CCDStatus = false;
            }
            catch (Exception ex)
            {
                CCDStatus = false;
                GlobalVar.AddMessage(ex.Message);
            }     
        }
        public void GetImage1()
        {
            
            //cam1ProcedureCall.Execute();
            Image_1?.Dispose();
            Image_1 = Framegrabber1.GrabImage();//拍照
            Image_2?.Dispose();
            Image_2 = Framegrabber2.GrabImage();//拍照
            Image_3?.Dispose();
            Image_3 = Framegrabber3.GrabImage();//拍照
            cam1ProcedureCall3.SetInputIconicParamObject("image1", Image_1);
            cam1ProcedureCall3.SetInputIconicParamObject("image2", Image_2);
            cam1ProcedureCall3.SetInputIconicParamObject("image3", Image_3);
            cam1ProcedureCall3.Execute();
            Image1?.Dispose();
            Image1 = cam1ProcedureCall3.GetOutputIconicParamImage("TiledImage");
            GlobalVar.hWndCtrl.addIconicVar(Image1);
            GlobalVar.hWndCtrl.repaint();
        }
        public void GetImage2()
        {

            Image_1?.Dispose();
            Image_1 = Framegrabber1.GrabImage();//拍照
            Image_2?.Dispose();
            Image_2 = Framegrabber2.GrabImage();//拍照
            Image_3?.Dispose();
            Image_3 = Framegrabber3.GrabImage();//拍照
            cam1ProcedureCall3.SetInputIconicParamObject("image1", Image_1);
            cam1ProcedureCall3.SetInputIconicParamObject("image2", Image_2);
            cam1ProcedureCall3.SetInputIconicParamObject("image3", Image_3);
            cam1ProcedureCall3.Execute();
            Image2?.Dispose();
            Image2 = cam1ProcedureCall3.GetOutputIconicParamImage("TiledImage");
            GlobalVar.hWndCtrl.addIconicVar(Image2);
            GlobalVar.hWndCtrl.repaint();
        }
        public void OpenImage(string fullpath)
        {
            try
            {
                Image1?.Dispose();
                Image1 = new HImage();
                Image1.ReadImage(fullpath);
                GlobalVar.hWndCtrl.addIconicVar(Image1);
                GlobalVar.hWndCtrl.repaint();
                GlobalVar.AddMessage("打开图片");
            }
            catch (Exception ex) { GlobalVar.AddMessage(ex.Message); }
        }
        public bool[] Result_etch, Result_blue;
        public void ProcessImage()
        {
            Result_etch = new bool[10];
            Result_blue = new bool[10];
            try
            {
                if (Image1 != null && Image2 != null)
                {
                    cam1ProcedureCall1.SetInputIconicParamObject("image1", Image1);
                    cam1ProcedureCall1.SetInputIconicParamObject("image2", Image2);
                    cam1ProcedureCall1.Execute();
                    TiledImage?.Dispose();
                    TiledImage = cam1ProcedureCall1.GetOutputIconicParamImage("TiledImage");
                    GlobalVar.hWndCtrl.addIconicVar(TiledImage);
                    GlobalVar.hWndCtrl.repaint();
                    cam1ProcedureCall2.SetInputIconicParamObject("Image", TiledImage);//传入图像
                    cam1ProcedureCall2.Execute();
                    HRegion Rectangle10 = cam1ProcedureCall2.GetOutputIconicParamRegion("Rectangle10");
                    HRegion Rectangle11 = cam1ProcedureCall2.GetOutputIconicParamRegion("Rectangle11");
                    window1.SetColor("red");
                    window1.DispRegion(Rectangle10);
                    window1.SetColor("red");
                    window1.DispRegion(Rectangle11);
                    HTuple result_etch = cam1ProcedureCall2.GetOutputCtrlParamTuple("Result_etch");
                    HTuple result_blue = cam1ProcedureCall2.GetOutputCtrlParamTuple("Result_blue");
                    GlobalVar.AddMessage("蚀刻:");
                    foreach (int item in result_etch.IArr)
                    {
                        GlobalVar.AddMessage(item.ToString());
                    }
                    GlobalVar.AddMessage("蓝膜:");
                    foreach (int item in result_blue.IArr)
                    {
                        GlobalVar.AddMessage(item.ToString());
                    }
                    GlobalVar.AddMessage("图像处理完成");
                    for (int i = 0; i < Result_etch.Length && i < result_etch.IArr.Length && i < result_blue.IArr.Length; i++)
                    {
                        Result_etch[i] = result_etch[i];
                        Result_blue[i] = result_blue[i];
                    }
                }
                else
                {
                    GlobalVar.AddMessage("无图像");
                }
            }
            catch (Exception ex)
            {

                GlobalVar.AddMessage(ex.Message);
            }

        }
        public void SaveImage(string fullpath)
        {
            try
            {
                this.Image1.WriteImage("bmp", 0, fullpath);
                GlobalVar.AddMessage("图片保存成功！");
            }
            catch(Exception ex) { GlobalVar.AddMessage(ex.Message); }
        }

    }
}
