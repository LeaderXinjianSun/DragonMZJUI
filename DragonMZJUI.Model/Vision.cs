using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ViewROI;
using HalconDotNet;
using System.IO;

namespace DragonMZJUI.Model
{
    public class Vision
    {
        public HWindow window1;
        public HDevEngine myEngine = new HDevEngine();
        public HDevProcedureCall cam1ProcedureCall;
        public bool CCDStatus = false;
        //C:/Program Files/MVTec/HALCON-13.0/procedures/
        public Vision()
        {
            try
            {

                InitSaveImageFilePath();
                string path = System.Environment.CurrentDirectory + "\\Programs";
                //视觉引擎加载过程
                myEngine.SetProcedurePath(path);
                //视觉脚本程序加载
                HDevProgram myProgram = new HDevProgram(path + "\\Main.hdev");
                //将过程挂载到视觉脚本
                cam1ProcedureCall = new HDevProcedureCall(new HDevProcedure(myProgram, "HS9Operate"));
                OpenCameraAsync();
            }
            catch (Exception ex)
            {
                GlobalVar.AddMessage(ex.Message);
            }
        }
        private void InitSaveImageFilePath()
        {
            try
            {
                if (!Directory.Exists(@"E:\images"))
                {
                    Directory.CreateDirectory(@"E:\images");
                }
                string[] imagefilenames = Directory.GetFiles(@"E:\images");
                if (imagefilenames.Length >= 200)
                {
                    for (int i = 0; i < imagefilenames.Length; i++)
                    {
                        File.Delete(imagefilenames[i]);
                    }
                    GlobalVar.AddMessage("清理照片");
                }
            }
            catch (Exception ex)
            {

                GlobalVar.AddMessage(ex.Message);
            }
        }
        public HImage Image1 = null;
        public HImage Image2 = null;
        HFramegrabber Framegrabber;
        public async void OpenCameraAsync()
        {
            Task task = Task.Run(() =>
            {
                OpenCamera();
            });
            await task;
        }
        public void OpenCamera()
        {
            try
            {
                GlobalVar.AddMessage("相机打开中...");
                //Image Acquisition 01: Code generated by Image Acquisition 01
                Framegrabber = new HFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default",
                    -1, "default", -1, "false", "default", "USER_ID", 0, -1);
                GlobalVar.AddMessage("相机打开成功！");
                CCDStatus = true;
            }
            catch(Exception ex)
            {
                CCDStatus = false;
                GlobalVar.AddMessage(ex.Message);
            }

        }
        public void CloseCamera()
        {
            try
            {
                GlobalVar.AddMessage("相机关闭中...");
                HOperatorSet.CloseAllFramegrabbers();
                GlobalVar.AddMessage("相机关闭！");
                CCDStatus = false;
            }
            catch (Exception ex)
            {
                CCDStatus = false;
                GlobalVar.AddMessage(ex.Message);
            }     
        }
        public void GetImage1()
        {
            
            //cam1ProcedureCall.Execute();
            Image1?.Dispose();
            Image1 = Framegrabber.GrabImage();//拍照
            GlobalVar.hWndCtrl.addIconicVar(Image1);
            GlobalVar.hWndCtrl.repaint();
        }
        public void GetImage2()
        {

            //cam1ProcedureCall.Execute();
            Image2?.Dispose();
            Image2 = Framegrabber.GrabImage();//拍照
            GlobalVar.hWndCtrl.addIconicVar(Image2);
            GlobalVar.hWndCtrl.repaint();
        }
        public void OpenImage(string fullpath)
        {
            try
            {
                Image1?.Dispose();
                Image1 = new HImage();
                Image1.ReadImage(fullpath);
                GlobalVar.hWndCtrl.addIconicVar(Image1);
                GlobalVar.hWndCtrl.repaint();
                GlobalVar.AddMessage("打开图片");
            }
            catch (Exception ex) { GlobalVar.AddMessage(ex.Message); }
        }
        public void ProcessImage()
        {
            try
            {
                if (Image1 != null)
                {
                    cam1ProcedureCall.SetInputIconicParamObject("Image", Image1);//传入图像
                    cam1ProcedureCall.Execute();
                    HRegion Rectangle10 = cam1ProcedureCall.GetOutputIconicParamRegion("Rectangle10");
                    HRegion Rectangle11 = cam1ProcedureCall.GetOutputIconicParamRegion("Rectangle11");
                    window1.SetColor("red");
                    window1.DispRegion(Rectangle10);
                    window1.SetColor("green");
                    window1.DispRegion(Rectangle11);
                    HTuple Result_etch = cam1ProcedureCall.GetOutputCtrlParamTuple("Result_etch");
                    HTuple Result_blue = cam1ProcedureCall.GetOutputCtrlParamTuple("Result_blue");
                    GlobalVar.AddMessage("蚀刻: " + Result_etch.ToString());
                    GlobalVar.AddMessage("蓝膜: " + Result_blue.ToString());
                    GlobalVar.AddMessage("图像处理完成");
                }
                else
                {
                    GlobalVar.AddMessage("无图像");
                }
            }
            catch (Exception ex)
            {

                GlobalVar.AddMessage(ex.Message);
            }

        }
        public void SaveImage(string fullpath)
        {
            try
            {
                this.Image1.WriteImage("bmp", 0, fullpath);
                GlobalVar.AddMessage("图片保存成功！");
            }
            catch(Exception ex) { GlobalVar.AddMessage(ex.Message); }
        }

    }
}
