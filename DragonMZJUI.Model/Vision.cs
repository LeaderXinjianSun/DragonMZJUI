using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ViewROI;
using HalconDotNet;
using System.IO;
using BingLibrary.hjb.file;
using System.Data;
using System.Runtime.Serialization.Formatters.Binary;


namespace DragonMZJUI.Model
{
    public class Vision
    {
        public HWindow window1;
        public HDevEngine myEngine = new HDevEngine();
        public HDevProcedureCall cam1ProcedureCall1, cam1ProcedureCall2, cam1ProcedureCall3;



        public bool CCDStatus = false;
        //C:/Program Files/MVTec/HALCON-13.0/procedures/
        public Vision()
        {
            try
            {

                InitSaveImageFilePath();
                string path = System.Environment.CurrentDirectory + "\\Programs";
                //视觉引擎加载过程
                myEngine.SetProcedurePath(path);
                //视觉脚本程序加载
                HDevProgram myProgram = new HDevProgram(path + "\\Main.hdev");
                //将过程挂载到视觉脚本
                
                //cam1ProcedureCall1 = new HDevProcedureCall(new HDevProcedure(myProgram, "TileImage"));
                cam1ProcedureCall2 = new HDevProcedureCall(new HDevProcedure(myProgram, "HS9Operate"));
                //cam1ProcedureCall3 = new HDevProcedureCall(new HDevProcedure(myProgram, "TileImage3"));
                OpenCameraAsync();
            }
            catch (Exception ex)
            {
                GlobalVar.AddMessage(ex.Message);
            }
        }
        private void InitSaveImageFilePath()
        {
            try
            {
                if (!Directory.Exists(@"E:\images"))
                {
                    Directory.CreateDirectory(@"E:\images");
                }
                string[] imagefilenames = Directory.GetFiles(@"E:\images");
                if (imagefilenames.Length >= 200)
                {
                    for (int i = 0; i < imagefilenames.Length; i++)
                    {
                        File.Delete(imagefilenames[i]);
                    }
                    GlobalVar.AddMessage("清理照片");
                }
            }
            catch (Exception ex)
            {

                GlobalVar.AddMessage(ex.Message);
            }
        }
        public HImage Image1 = null;
        public HImage Image2 = null;
        public HImage Image_1 = null, Image_2 = null, Image_3 = null;
        public HImage TiledImage = null;
        HFramegrabber Framegrabber1, Framegrabber2, Framegrabber3;
        public async void OpenCameraAsync()
        {
            Task task = Task.Run(() =>
            {
                OpenCamera();
            });
            await task;
        }
        public void OpenCamera()
        {
            try
            {
                GlobalVar.AddMessage("相机打开中...");
                //Image Acquisition 01: Code generated by Image Acquisition 01
                Framegrabber1 = new HFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default",
                    -1, "default", -1, "false", "default", "CAM1", 0, -1);
                Framegrabber2 = new HFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default",
    -1, "default", -1, "false", "default", "CAM2", 0, -1);
                Framegrabber3 = new HFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default",
    -1, "default", -1, "false", "default", "CAM3", 0, -1);
                //Framegrabber = new HFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default",
                //    -1, "default", -1, "false", "default", "cam1", 0, -1);
                GlobalVar.AddMessage("相机打开成功！");
                CCDStatus = true;
            }
            catch(Exception ex)
            {
                CCDStatus = false;
                GlobalVar.AddMessage(ex.Message);
            }

        }
        public void CloseCamera()
        {
            try
            {
                GlobalVar.AddMessage("相机关闭中...");
                HOperatorSet.CloseAllFramegrabbers();
                GlobalVar.AddMessage("相机关闭！");
                CCDStatus = false;
            }
            catch (Exception ex)
            {
                CCDStatus = false;
                GlobalVar.AddMessage(ex.Message);
            }     
        }
        public void GetImage1()
        {
            
            //cam1ProcedureCall.Execute();
            Image_1?.Dispose();
            Image_1 = Framegrabber1.GrabImage();//拍照
            Image_2?.Dispose();
            Image_2 = Framegrabber2.GrabImage();//拍照
            Image_3?.Dispose();
            Image_3 = Framegrabber3.GrabImage();//拍照
            
            Image1?.Dispose();
            Image1 = Image_1.ConcatObj(Image_2).ConcatObj(Image_3).TileImages(3, "horizontal");

            GlobalVar.hWndCtrl.addIconicVar(Image1);
            GlobalVar.hWndCtrl.repaint();
        }
        public void GetImage2()
        {

            Image_1?.Dispose();
            Image_1 = Framegrabber1.GrabImage();//拍照
            Image_2?.Dispose();
            Image_2 = Framegrabber2.GrabImage();//拍照
            Image_3?.Dispose();
            Image_3 = Framegrabber3.GrabImage();//拍照

            Image2?.Dispose();
            Image2 = Image_1.ConcatObj(Image_2).ConcatObj(Image_3).TileImages(3, "horizontal");
            GlobalVar.hWndCtrl.addIconicVar(Image2);
            GlobalVar.hWndCtrl.repaint();
        }
        public void OpenImage(string fullpath)
        {
            try
            {
                Image1?.Dispose();
                Image1 = new HImage();
                Image1.ReadImage(fullpath);
                GlobalVar.hWndCtrl.addIconicVar(Image1);
                GlobalVar.hWndCtrl.repaint();
                GlobalVar.AddMessage("打开图片");
            }
            catch (Exception ex) { GlobalVar.AddMessage(ex.Message); }
        }
        public void OpenImage2(string fullpath)
        {
            try
            {
                Image2?.Dispose();
                Image2 = new HImage();
                Image2.ReadImage(fullpath);
                GlobalVar.hWndCtrl.addIconicVar(Image2);
                GlobalVar.hWndCtrl.repaint();
                GlobalVar.AddMessage("打开图片2");
            }
            catch (Exception ex) { GlobalVar.AddMessage(ex.Message); }
        }
        public bool[] Result_etch, Result_blue, Result_barcode;
        HTuple result_barcode;
        public void ProcessImage()
        {
            Result_etch = new bool[6];
            Result_blue = new bool[6];
            Result_barcode = new bool[6];
            try
            {
                if (Image1 != null && Image2 != null)
                {


                    TiledImage?.Dispose();
                    TiledImage = Image1.ConcatObj(Image2).TileImages(1, "vertical");
                    
                    GlobalVar.hWndCtrl.addIconicVar(TiledImage);
                    GlobalVar.hWndCtrl.repaint();
                    cam1ProcedureCall2.SetInputIconicParamObject("Image", TiledImage);//传入图像
                    cam1ProcedureCall2.Execute();
                    HRegion Rectangle10 = cam1ProcedureCall2.GetOutputIconicParamRegion("Rectangle10");
                    HRegion Rectangle11 = cam1ProcedureCall2.GetOutputIconicParamRegion("Rectangle11");
                    window1.SetColor("red");
                    window1.DispRegion(Rectangle10);
                    window1.SetColor("red");
                    window1.DispRegion(Rectangle11);
                    HTuple result_etch = cam1ProcedureCall2.GetOutputCtrlParamTuple("Result_etch");
                    HTuple result_blue = cam1ProcedureCall2.GetOutputCtrlParamTuple("Result_blue");
                    //HTuple result_barcode = cam1ProcedureCall2.GetOutputCtrlParamTuple("Result_barcode");
                    result_barcode = cam1ProcedureCall2.GetOutputCtrlParamTuple("Result_barcode");
                    GlobalVar.AddMessage("蚀刻:");
                    foreach (long item in result_etch.LArr)
                    {
                        if (item == 0)
                            GlobalVar.AddMessage(item.ToString() + "OK");
                        else
                            GlobalVar.AddMessage(item.ToString() + "NG");
                    }
                    GlobalVar.AddMessage("条码:");

                    try
                    {
                        int index = 0;
                        foreach (string item in result_barcode.SArr)
                        {
                            if (item != "error")
                            {
                                Result_barcode[index] = false;
                            }
                            else
                            {
                                Result_barcode[index] = true;
                            }
                            index++;

                        }
                    }
                   
                    catch(Exception ex)
                    {
                        GlobalVar.AddMessage(ex.Message);
                    }


                  UploadBarcode();
                    try
                    {
                        foreach (string item in result_barcode.SArr)
                        {
                            System.Threading.Thread.Sleep(1000);
                            GlobalVar.AddMessage(item);
                            //SaveCSVfileBarcode(item);
                        }
                    }
                    catch { }
                    GlobalVar.AddMessage("蓝膜:");
                    foreach (long item in result_blue.LArr)
                    {
                        if (item == 1)
                            GlobalVar.AddMessage(item.ToString() + "NG");
                        else
                            GlobalVar.AddMessage(item.ToString() + "OK");
                    }
                    GlobalVar.AddMessage("图像处理完成");
                    for (int i = 0; i < result_etch.LArr.Length; i++)// i < Result_etch.Length && i < result_etch.LArr.Length && i < result_blue.LArr.Length; i++)
                    {
                        Result_etch[i] = result_etch[i];
                        //Result_blue[i] = result_blue[i];
                    }
                }
                else
                {
                    GlobalVar.AddMessage("无图像");
                }
            }
            catch (Exception ex)
            {

                GlobalVar.AddMessage(ex.Message);
            }
            //GC.Collect();
        }
        public void SaveImage(string fullpath)
        {
            try
            {
                this.Image1.WriteImage("bmp", 0, fullpath);
                GlobalVar.AddMessage("图片保存成功！");
            }
            catch(Exception ex) { GlobalVar.AddMessage(ex.Message); }
        }
        private void SaveCSVfileBarcode(string bar,int index)
        {
            string filepath = "F:\\生产记录\\条码" + GlobalVar.GetBanci() + ".csv";
            if (!Directory.Exists("F:\\生产记录"))
            {
                Directory.CreateDirectory("F:\\生产记录");
            }
            try
            {
                if (!File.Exists(filepath))
                {
                    string[] heads = { "Date","Index", "Barcode", "MachineID", "UserID", "ProductName", "MachineName", "FactoryArea", "FactorySeparation", "ZhijuClass", "Barcodeproofing", "scancodetype","CCD" ,"NNNN",};
                    Csvfile.AddNewLine(filepath, heads);
                }
                string[] conte = { System.DateTime.Now.ToString(),index.ToString(), bar, GlobalVar.MachineID, GlobalVar.UserID, GlobalVar.ProductName, GlobalVar.MachineName, GlobalVar.FactoryArea, GlobalVar.FactorySeparation, GlobalVar.ZhijuClass, GlobalVar.Barcodeproofing, GlobalVar.scancodetype, GlobalVar.CCD, GlobalVar.NNNN, };
                Csvfile.AddNewLine(filepath, conte);

                MESDataItem tr = new MESDataItem() { Date = System.DateTime.Now.ToString(),Index = index.ToString(), Barcode = bar, MachineID = GlobalVar.MachineID, UserID = GlobalVar.UserID, ProductName = GlobalVar.ProductName, MachineName = GlobalVar.MachineName, FactoryArea = GlobalVar.FactoryArea, FactorySeparation = GlobalVar.FactorySeparation, ZhijuClass = GlobalVar.ZhijuClass, Barcodeproofing = GlobalVar.Barcodeproofing, scancodetype = GlobalVar.scancodetype, CCD = GlobalVar.CCD, NNNN = GlobalVar.NNNN, };
                lock (GlobalVar.obj1)
                {
                    // GlobalVar.AlarmRecord.Add(tr);
                    GlobalVar.MESDataRecordQueue.Enqueue(tr);
                }
                string para1 = GlobalVar.MAC + "|"+ GlobalVar.CCD + "," + GlobalVar.NNNN + "," + GlobalVar.ProductName + "," + GlobalVar.MachineID + "," + GlobalVar.UserID + "," + GlobalVar.MachineName + "," + GlobalVar.ZhijuClass + "," + GlobalVar.Barcodeproofing + "," + GlobalVar.FactoryArea + "," + GlobalVar.FactorySeparation + "," + GlobalVar.scancodetype + "," + bar;
                //进程锁住，防止与自动重传操作冲突
                lock (GlobalVar.obj2)
                {
                    DataSet ds = webServiceSZ.ws.getDataFromSer("MAC", "MAC", GlobalVar.MachineID, "MWS01", "MWS_ZX01", para1, System.DateTime.Now.ToShortDateString());
                GlobalVar.AddMessage("上传信息;"+ para1);
                GlobalVar.AddMessage(ds.Tables[0].Rows[0].ItemArray[0].ToString());
                    if (!ds.Tables[0].Rows[0].ItemArray[0].ToString().Contains("OK"))
                    {
                        string configPath = System.Environment.CurrentDirectory + "\\ReUpdateData.config";
                        if (File.Exists(configPath))
                        {
                            try
                            {
                                //如果文件存在则先读出来
                                FileStream fileStream = new FileStream(configPath, FileMode.Open, FileAccess.Read, FileShare.Read);
                                BinaryFormatter mBinFmat = new BinaryFormatter();
                                UploadData Ud = mBinFmat.Deserialize(fileStream) as UploadData;
                                fileStream.Close();
                                //追加记录，并覆盖原文件
                                Ud.ReUpdate.Add(new Tuple<string, DateTime>(para1, DateTime.Now));
                                fileStream = new FileStream(configPath, FileMode.Create);
                                BinaryFormatter b = new BinaryFormatter();
                                b.Serialize(fileStream, Ud);
                                fileStream.Close();
                                GlobalVar.AddMessage(bar + " 上传失败，保存到本地");
                            }
            catch (Exception ex)
            {
                GlobalVar.AddMessage(ex.Message);
            }
                        }
                        else
                        {
                            try
                            {
                                //如果文件不存在则直接创建
                                UploadData Ud = new UploadData();
                                Ud.ReUpdate.Add(new Tuple<string, DateTime>(para1, DateTime.Now));
                                FileStream fileStream = new FileStream(configPath, FileMode.Create);
                                BinaryFormatter b = new BinaryFormatter();
                                b.Serialize(fileStream, Ud);
                                fileStream.Close();
                                GlobalVar.AddMessage(bar + " 上传失败，保存到本地");
                            }
                            catch (Exception ex)
                            {
                                GlobalVar.AddMessage(ex.Message);
                            }
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                GlobalVar.AddMessage(ex.Message);
            }

        }
        public async void ReUploadAction()
        {
            Task UploadBarcode = Task.Run(() =>
            {
                try
                {
                    string configPath = System.Environment.CurrentDirectory + "\\ReUpdateData.config";
                    if (File.Exists(configPath))
                    {
                        try
                        {
                            //进程锁住，防止与正在上传的操作冲突
                            lock (GlobalVar.obj2)
                            {
                                FileStream fileStream = new FileStream(configPath, FileMode.Open, FileAccess.Read, FileShare.Read);
                                BinaryFormatter mBinFmat = new BinaryFormatter();
                                UploadData Ud = mBinFmat.Deserialize(fileStream) as UploadData;
                                fileStream.Close();
                                foreach (var item in Ud.ReUpdate)
                                {
                                    lock (GlobalVar.obj2)
                                    {
                                        DataSet ds = webServiceSZ.ws.getDataFromSer("MAC", "MAC", GlobalVar.MachineID, "MWS01", "MWS_ZX01", item.Item1, item.Item2.ToString());
                                        GlobalVar.AddMessage("重传信息;" + item.Item1);
                                        GlobalVar.AddMessage(ds.Tables[0].Rows[0].ItemArray[0].ToString());
                                        if (ds.Tables[0].Rows[0].ItemArray[0].ToString().Contains("OK"))
                                        {
                                            Ud.ReUpdate.Remove(item);
                                        }
                                    }
                                    System.Threading.Thread.Sleep(1000);
                                }
                                fileStream = new FileStream(configPath, FileMode.Create);
                                BinaryFormatter b = new BinaryFormatter();
                                b.Serialize(fileStream, Ud);
                                fileStream.Close();
                            }
                        }
                        catch (Exception ex)
                        {
                            GlobalVar.AddMessage(ex.Message);
                        }
                    }
                }
                catch { }
            });
            await UploadBarcode;
        }

        public async  void UploadBarcode()
        {
            Task UploadBarcode = Task.Run(() => 
            {
                try
                {
                    int index = 1;
                    foreach (string item in result_barcode.SArr)
                    {
                        System.Threading.Thread.Sleep(1000);
                        GlobalVar.AddMessage(item);
                        {
                            if (item != "error")
                                SaveCSVfileBarcode(item, index);
                            index++;

                        }
                        }
                    }
                catch { }
            });
            await UploadBarcode;
        }
    }
}
